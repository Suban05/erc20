#!/usr/bin/env ruby
# frozen_string_literal: true

# SPDX-FileCopyrightText: Copyright (c) 2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

$stdout.sync = true

require 'backtrace'
require 'loog'
require 'slop'
require_relative '../lib/erc20'
require_relative '../lib/erc20/erc20'
require_relative '../lib/erc20/wallet'

begin
  begin
    opts = Slop.parse(ARGV, strict: true, help: true) do |o|
      o.banner = "Usage (#{ERC20::VERSION}): erc20 [options] command [args]
Commands are:
    key:         Generate a new Etherium private key (64 symbols)
    address:     Turn private key into a public address (44 symbols)
    price:       Get current price of one gas unit, in gwei
    pay:         Send ERC20 payment
    eth_pay:     Send ETH payment
    balance:     Get ERC20 balance
    eth_balance: Get ETH balance
Options are:"
      o.string(
        '--contract',
        'Public address of ERC20 contract',
        default: ERC20::Wallet.USDT
      )
      o.integer(
        '--chain',
        'Etherium chain ID',
        default: 1
      )
      o.string(
        '--host',
        'Host name of the provider',
        default: 'sepolia.infura.io'
      )
      o.string(
        '--port',
        'TCP port of the provider',
        default: 443
      )
      o.string(
        '--http_path',
        'URL path for the HTTP RPC entry point of the provider',
        default: '/v3'
      )
      o.string(
        '--ws_path',
        'URL path for the Websockets entry point of the provider',
        default: '/v3/ws'
      )
      o.string(
        '--proxy',
        'HTTP/S proxy for all requests, e.g. "localhost:3128"'
      )
      o.integer(
        '--attempts',
        'How many times should we try before failing',
        default: 1
      )
      o.bool(
        '--dry',
        'Don\'t send a real payment, run in a read-only mode'
      )
      o.bool('--help', 'Read this: https://github.com/yegor256/erc20') do
        puts o
        exit
      end
      o.bool('--verbose', 'Print all possible debug messages')
    end
  rescue Slop::Error => e
    raise e.message
  end
  raise 'Try --help' if opts.arguments.empty?
  log = opts[:verbose] ? Loog::VERBOSE : Loog::REGULAR
  wallet = ERC20::Wallet.new(log:)
  case opts.arguments[0]
  when 'key'
    puts Eth::Key.new.private_hex
  when 'address'
    puts Eth::Key.new(priv: opts.arguments[1]).address.to_s
  when 'pay'
    pkey = opts.arguments[1]
    raise 'Private key is required' if pkey.nil?
    priv = Eth::Key.new(priv: pkey)
    log.info("Sending from #{priv.address.to_s}")
    address = opts.arguments[2]
    raise 'Address is required' if address.nil?
    raise 'Address is not valid' unless /^0x[0-9a-fA-F]{42}$/.match?(address)
    log.info("Sending to #{address}")

    fee = opts.arguments[2]
    raise 'Miners fee argument is required' if fee.nil?
    fee = fee.to_i if /^[0-9]+$/.match?(fee)
    sources = opts.arguments[3]
    raise 'Addresses argument is required' if sources.nil?
    target = opts.arguments[4]
    raise 'Target argument is required' if target.nil?
    change = opts.arguments[5]
    raise 'Change argument is required' if change.nil?
    puts sibit.pay(
      amount, fee,
      sources.split(',').map { |p| p.split(':') }.to_h,
      target, change,
      skip_utxo: opts['skip-utxo']
    )
  else
    raise "Command #{opts.arguments[0]} is not supported"
  end
rescue StandardError => e
  if opts[:verbose]
    puts Backtrace.new(e)
  else
    puts "ERROR: #{e.message}"
  end
  exit(255)
end
